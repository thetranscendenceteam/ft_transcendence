---
version: "3.8"
services:
  redis:
    image: redis:alpine
    restart: unless-stopped
    networks:
      - db
    healthcheck:
      test: redis-cli ping || exit 1
      interval: 10s
      timeout: 5s
      retries: 6
      start_period: 5s
    #ports:
    #  - 6379:6379

  postgres:
    image: postgres:15.4-alpine
    user: postgres
    restart: unless-stopped
    env_file: .env-postgres
    healthcheck:
      test: pg_isready || exit 1
      interval: 10s
      timeout: 5s
      retries: 6
      start_period: 5s
    networks:
      - db
    volumes:
      - postgres-data:/var/lib/postgresql/data

  front:
    image: ghcr.io/thetranscendenceteam/front:latest
    build:
      context: ..
      dockerfile: images/front/Dockerfile
      args:
        APP_ENV: developement
    restart: unless-stopped
    #env_file: .env-front
    healthcheck:
      test: curl -f -s http://127.0.0.1:3000/ > /dev/null || exit 1
      interval: 10s
      timeout: 5s
      retries: 12
      start_period: 20s
    environment:
      - APP_ENV=developement
    depends_on:
      back:
        condition: service_started
    networks:
      - back
    volumes:
      - front-data:/data # Needed ?
      - ../src/front/src:/app/src
      - .env-front:/app/.env.local

  back:
    image: ghcr.io/thetranscendenceteam/back:latest
    build:
      context: ..
      dockerfile: images/back/Dockerfile
      args:
        APP_ENV: developement
    restart: unless-stopped
    #env_file: .env-back
    healthcheck:
      test: curl -f -s http://127.0.0.1:3000/health > /dev/null || exit 1
      interval: 10s
      timeout: 5s
      retries: 12
      start_period: 20s
    environment:
      - APP_ENV=developement
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    platform: linux/amd64
    networks:
      - db
      - back
    volumes:
      - ../src/back/prisma/migrations:/app/prisma/migrations
      - ../src/back/src:/app/src
      - back-data:/data # Needed ?
      - .env-back:/app/.env

  adminer:
    image: adminer
    restart: on-failure
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - 8081:8080
    networks:
      - db

  nginx:
    image: ghcr.io/thetranscendenceteam/nginx:latest
    build:
      context: ..
      dockerfile: images/nginx/Dockerfile
    restart: unless-stopped
    env_file:
      - .env
    depends_on:
      back:
        condition: service_started
      front:
        condition: service_started
    ports:
      - 8080:8080
      - 8443:8443
    networks:
      - back
    volumes:
      - nginx-ssl:/etc/nginx/ssl

volumes:
  postgres-data:
  front-data:
  back-data:
  nginx-ssl:

networks:
  back:
  db:
