// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

// generator dbml {
//   provider = "prisma-dbml-generator"
// }

model Users {
    id              String               @id @unique @default(uuid()) @db.VarChar(36)
    ftId            Int?                 @unique @db.Integer
    pseudo          String               @unique @db.VarChar(255)
    mail            String               @unique @db.VarChar(255)
    password        String?
    firstName       String               @db.VarChar(255)
    lastName        String               @db.VarChar(255)
    avatar          String
    xp              Int                  @default(0) @db.Integer
    createdAt       DateTime             @default(now())
    modifiedAt      DateTime             @default(now())
    count           Int                  @default(0) @db.Integer
    campus          String?              @db.VarChar(255)
    twoFA           Boolean              @default(false)
    twoFASecret     String?              @db.VarChar(255)
    twoFAOtpAuthUrl String?              @db.VarChar(255)
    chats           UsersInChats[]
    friends         UsersRelationships[]
    matchs          UsersInMatchs[]
    UsersInBanLists UsersInBanLists[]
}

model Chats {
    id              String            @id @unique @default(uuid()) @db.VarChar(36)
    name            String            @unique @db.VarChar(255)
    password        String?
    createdAt       DateTime          @default(now())
    users           UsersInChats[]
    messages        Messages[]
    UsersInBanLists UsersInBanLists[]
}

model Matchs {
    id         String          @id @unique @default(uuid()) @db.VarChar(36)
    createdAt  DateTime        @default(now())
    startedAt  DateTime?
    finishedAt DateTime?
    difficulty MatchDifficulty
    score      MatchScore?
    users      UsersInMatchs[]
}

model Messages {
    id        String   @id @unique @default(uuid()) @db.VarChar(36)
    timestamp DateTime @default(now())
    message   String
    username  String   @db.VarChar(255)
    chatId    String   @db.VarChar(36)
    Chat      Chats    @relation(fields: [chatId], references: [id])
}

model UsersInChats {
    user     Users        @relation(fields: [userId], references: [id])
    userId   String       @db.VarChar(36)
    chat     Chats        @relation(fields: [chatId], references: [id])
    chatId   String       @db.VarChar(36)
    role     UserChatRole @default(member)
    joinedAt DateTime     @default(now())

    @@id([userId, chatId])
}

model UsersInBanLists {
    user       Users          @relation(fields: [userId], references: [id])
    userId     String         @db.VarChar(36)
    chat       Chats          @relation(fields: [chatId], references: [id])
    chatId     String         @db.VarChar(36)
    status     UserChatStatus
    lastChange DateTime       @default(now())

    @@id([userId, chatId])
}

model UsersRelationships {
    id        String             @id @unique @default(uuid()) @db.VarChar(36)
    firstId   Int
    secondId  Int
    status    RelationshipStatus @default(unknown)
    createdAt DateTime           @default(now())
    updatedAt DateTime           @default(now())
    Users     Users              @relation(fields: [firstId], references: [ftId])
}

model UsersInMatchs {
    user    Users   @relation(fields: [userId], references: [id])
    userId  String  @db.VarChar(36)
    match   Matchs  @relation(fields: [matchId], references: [id])
    matchId String  @db.VarChar(36)
    isWin   Boolean @default(false)

    @@id([userId, matchId])
}

model MatchScore {
    id          String @id @unique @default(uuid()) @db.VarChar(36)
    winnerScore Int    @default(0) @db.Integer
    looserScore Int    @default(0) @db.Integer
    bestOf      Int    @db.Integer

    match   Matchs @relation(fields: [matchId], references: [id])
    matchId String @unique @db.VarChar(36)
}

enum RelationshipStatus {
    friends
    pending_first_to_second
    block_first_to_second
    block_second_to_first
    pending_second_to_first
    unknown
}

enum UserChatRole {
    owner
    admin
    member
}

enum UserChatStatus {
    normal
    muted
    banned
}

enum MatchDifficulty {
    easy
    normal
    hard
}
